#!/usr/bin/env python3
"""
Script to install jupyterhub helm chart with minikube

for testing binderhub

Gets the jupyterhub chart version from the binderhub helm chart
to ensure we are testing against a reasonable version.
"""
import sys
import os
import pipes
from subprocess import check_call, check_output
import time

from kubernetes import client, config
from ruamel import yaml
from tempfile import NamedTemporaryFile

auth_enabled = '--auth' in sys.argv

namespace = os.environ.get('K8S_NAMESPACE', 'binderhub-test')
helm_release_name = 'binderhub-test'

here = os.path.abspath(os.path.dirname(__file__))
helm_chart = os.path.join(here, os.pardir, os.pardir, 'helm-chart')
requirements_yaml = os.path.join(helm_chart, 'binderhub', 'requirements.yaml')
values_yaml = os.path.join(helm_chart, 'binderhub', 'values.yaml')

def get_hub_chart_dependency():
    """Get the JupyterHub chart info from the binderhub chart requirements.yaml"""
    with open(requirements_yaml) as f:
        requirements = yaml.safe_load(f)
    for dep in requirements['dependencies']:
        if dep['name'] == 'jupyterhub':
            return dep
    else:
        raise ValueError("Couldn't find JupyterHub in %s:\n%s" %
            (requirements_yaml, requirements)
        )

jupyterhub = get_hub_chart_dependency()

# Add and update the JupyterHub Helm chart repo
check_call(['helm', 'repo', 'add', '--force-update', 'jupyterhub', jupyterhub['repository']])
check_call(['helm', 'repo', 'update'])

# Deploying BinderHub normally automatically deploys JupyterHub from the same
# configuration file.
# In the CI tests JupyterHub is configured independently, so extract the
# JupyterHub config from the BinderHub helm chart values.yaml
tmp = NamedTemporaryFile(suffix='.yaml', delete=False)
tmp.close()
jupyterhub_values_yaml = tmp.name
with open(values_yaml) as valuesin:
    jupyterhub_values = yaml.safe_load(valuesin)['jupyterhub']
    with open(jupyterhub_values_yaml, 'w') as valuesout:
        yaml.safe_dump(jupyterhub_values, valuesout)

# launch with helm install (or upgrade, if already installed)
args = [
    'jupyterhub/jupyterhub',
    f'--version={jupyterhub["version"]}',
    f'--namespace={namespace}',
    '-f', jupyterhub_values_yaml,
    '-f', os.path.join(here, 'jupyterhub-chart-config.yaml'),
]
if auth_enabled:
    print('\nAuthentication is enabled')
    auth_conf_file = os.path.join(here, 'jupyterhub-chart-config-auth-additions.yaml')
    args.extend(['-f', auth_conf_file])

cmd = ['helm', 'upgrade', '--install', '--create-namespace', helm_release_name]
cmd.extend(args)
print("\n    %s\n" % ' '.join(map(pipes.quote, cmd)))

check_call(cmd)

os.remove(jupyterhub_values_yaml)
