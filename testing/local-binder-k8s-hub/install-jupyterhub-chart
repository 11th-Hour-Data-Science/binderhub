#!/usr/bin/env python3
"""
Makes a standalone installation of the JupyterHub Helm chart of the version
specified in the BinderHub Helm chart requirements.yaml file, and use the
configuration for the JupyterHub Helm chart nested in the BinderHub helm chart's
configuration.
"""
from subprocess import check_call
import os
import sys

from ruamel import yaml
from tempfile import NamedTemporaryFile

here = os.path.abspath(os.path.dirname(__file__))
helm_chart = os.path.join(here, os.pardir, os.pardir, 'helm-chart')


def get_jupyterhub_dependency_version():
    """Get the JupyterHub chart info from the binderhub chart requirements.yaml"""
    requirements_yaml = os.path.join(helm_chart, 'binderhub', 'requirements.yaml')

    with open(requirements_yaml) as f:
        requirements = yaml.safe_load(f)
    for dep in requirements['dependencies']:
        if dep['name'] == 'jupyterhub':
            return dep
    else:
        raise ValueError(f"JupyterHub as a Helm chart dependency not found in {requirements_yaml}:\n{requirements}")


with NamedTemporaryFile() as tmp_file:
    with open(os.path.join(helm_chart, 'binderhub', 'values.yaml')) as values_in:
        yaml.safe_dump(yaml.safe_load(values_in)['jupyterhub'], tmp_file)

    cmd = ['helm', 'upgrade', '--install', '--create-namespace', 'binderhub-test']
    cmd.extend([
        'jupyterhub/jupyterhub',
        f'--version={get_jupyterhub_dependency_version()}',
        f'--namespace={os.environ.get("K8S_NAMESPACE", "binderhub-test")}',
        f'--values={tmp_file}',
        f'--values={os.path.join(here, "jupyterhub-chart-config.yaml")}',
    ])
    if '--auth' in sys.argv:
        cmd.extend([
            f'--values={os.path.join(here, "jupyterhub-chart-config-auth-additions.yaml")}'
        ])
    print("Installing the JupyterHub Helm chart by itself")
    print(" ".join(cmd))
    check_call(cmd)
