#!/bin/bash
# test helm deployment
# - build and install helm chart
# - run tests marked with 'remote'

set -ex

# Is there a standard interface name?
for iface in eth0 ens4 enp0s3; do
    IP=$(ifconfig $iface | grep 'inet' | cut -d: -f2 | awk '{print $2}');
    if [ -n "$IP" ]; then
        echo "IP: $IP"
        break
    fi
done
if [ -z "$IP" ]; then
    echo "Failed to get IP, current interfaces:"
    ifconfig -a
    exit 2
fi
export BINDER_URL=http://$IP:30901
export HUB_URL=http://$IP:30902

cat <<EOF > helm-chart/travis-binder.yaml
config:
  BinderHub:
    hub_url: http://$IP:30902
EOF

if [[ ! -z "$GITHUB_ACCESS_TOKEN" ]]; then
  cat <<EOF >> helm-chart/travis-binder.yaml
  GitHubRepoProvider:
    access_token: '$GITHUB_ACCESS_TOKEN'
EOF
fi

echo "building helm chart"
cd helm-chart
helm repo add --force-update jupyterhub https://jupyterhub.github.io/helm-chart
helm dependency update ./binderhub
chartpress
cd ..
# git diff will show us the result of the chartpress render.
# This should only include the tags for chartpress images.
git --no-pager diff
docker images | sort

echo "installing binderhub helm chart"

cat helm-chart/travis-binder.yaml

helm upgrade --install --create-namespace binderhub-test \
  --namespace $K8S_NAMESPACE \
  helm-chart/binderhub \
  -f testing/k8s-binder-k8s-hub/binderhub-chart-config.yaml \
  -f helm-chart/travis-binder.yaml
await_binderhub


echo "waiting for servers to become responsive"
until curl --fail $BINDER_URL > /dev/null; do
  sleep 1
done
until curl --fail $HUB_URL> /dev/null; do
  sleep 1
done

echo "running tests against $BINDER_URL"
# run a few tests again, this time against the helm-installed binder
sleep 10
mark="remote"
if [[ -z "$GITHUB_ACCESS_TOKEN" ]]; then
  mark="$mark and not github_api"
fi
pytest -vsx -m "$mark" --log-cli-level=10 --cov binderhub
helm delete --namespace=$K8S_NAMESPACE binderhub-test
