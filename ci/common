#!/bin/sh
# Use https://www.shellcheck.net/ to reduce mistakes if you make changes to this file.

setup_helm() {
    helm_version="${1}"
    echo "setup helm ${helm_version}"
    curl -sf https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | DESIRED_VERSION="${helm_version}" bash
}

await_jupyterhub() {
    kubectl rollout status --watch --timeout 300s deployment/proxy \
 && kubectl rollout status --watch --timeout 300s deployment/hub \
 && (
        if kubectl get deploy/autohttps > /dev/null 2>&1; then
            kubectl rollout status --watch --timeout 300s deployment/autohttps || exit 1
        fi
    )
}

await_binderhub() {
    await_jupyterhub
    kubectl rollout status --watch --timeout 300s deployment/binder
}

full_namespace_report() {
    # list config (secret,configmap)
    kubectl get secret,cm
    # list networking (service,ingress)
    kubectl get svc,ing
    # list workloads (deployment,statefulset,daemonset,pod)
    kubectl get deploy,sts,ds,pod

    # if any pod has any non-ready -> show its containers' logs
    kubectl get pods -o json \
    | jq '
        .items[]
        | select(
            any(.status.containerStatuses[]?; .ready == false)
        )
        | .metadata.name' \
    | xargs --max-args 1 --no-run-if-empty \
    sh -c 'printf "\nPod with non-ready container detected\n - Logs of $0:\n"; kubectl logs --all-containers $0'

    # if any pods that should be scheduled by the user-scheduler are pending ->
    # show user-scheduler's logs
    (
        kubectl get pods -l "component in (user-placeholder,singleuser-server)" -o json \
        | jq -r '
            .items[]
            | select(.status.phase == "Pending")
            | .metadata.name
        '
    ) | xargs --max-args 1 --no-run-if-empty --max-lines \
    sh -c 'printf "\nPending user pod detected ($0)\n - Logs of deploy/user-scheduler:\n"; kubectl logs --all-containers deploy/user-scheduler'
}
